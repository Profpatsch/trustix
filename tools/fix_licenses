#!/usr/bin/env python

# Copyright © 2020-2022 The Trustix Authors
#
# SPDX-License-Identifier: MIT

#
# Writing reuse dependency files is not a fun excercise in a complex repository with multiple
# sub packages with a complex set of different licenses and sometimes even different licenses
# within the same directory.
#
# For example we license Nix expressions under MIT no matter where in the tree they live
# so that they can freely be copy-pasted into nixpkgs and other third party repos
# while the most important bits are all GPL-3.0-only.
#
# This script provides a way to express our rules and outputs a reuse compatible dep5 file
from __future__ import annotations
from concurrent.futures import ThreadPoolExecutor
from dataclasses import dataclass
from textwrap import dedent
import pretty_errors  # type: ignore
import subprocess
import os.path
from typing import (
    Optional,
    List,
    Dict,
)


# Ignore file paths starting with these prefixes
IGNORE_PREFIXES: List[str] = [
    "LICENSES",
    "state",
]


PY_SHEBANGS: List[str] = [
    "#!/usr/bin/env python",
    "#!/usr/bin/env python3",
]


DEP5_HEADER: str = dedent(
    f"""
Format: https://www.debian.org/doc/packaging-manuals/copyright-format/1.0/
Upstream-Name: trustix
Upstream-Contact: adisbladis <adisbladis@gmail.com>
Source: https://github.com/nix-community/trustix
"""
).lstrip()


def get_style_args(filename: str) -> List[str]:
    """Figure out what to pass as --style to reuse when adding headers"""

    # If a file has an extension reuse should be able to figure out what to do
    if os.path.splitext(os.path.basename(filename))[1] != "":
        return []

    with open(filename) as fd:
        try:
            opening_line = fd.readline().strip()
        except UnicodeDecodeError:
            return []

        if opening_line in PY_SHEBANGS:
            return ["--style", "python"]

        if opening_line == "#!/usr/bin/env bash":
            # This looks like a bug, but yes, bash uses the python comment style
            return ["--style", "python"]

    return []


@dataclass
class Rule:
    # SPDX License ID
    license: str

    # Copyright header
    copyright: str = "Copyright © 2020-2022 The Trustix Authors"

    # Only match these file suffixes (suffixes)
    suffixes: Optional[List[str]] = None

    # Ignore any files ending with these suffixes
    ignore_suffixes: Optional[List[str]] = None

    # Only match files from these subdirectories
    dirs: Optional[List[str]] = None

    # Whether to call `reuse addheader` on a matching file
    add_header: bool = False

    def __hash__(self) -> int:
        """Implement __hash__ so rules can be used as map keys"""
        return id(self)

    def check_compatible(self, f: str, rule: Rule) -> None:
        """
        It's OK for multiple rules to match the same file as long as
        the resulting license is the same
        """

        # Throw an inner more descriptive error and an outer error that adds both rules as context
        try:
            if self.copyright != rule.copyright:
                raise ValueError(
                    f"incompatible copyright assignments in '{f}': {self.copyright} != {rule.copyright}"
                )

            if self.license != rule.license:
                raise ValueError(
                    f"incompatible licenses in '{f}': {self.license} != {rule.license}"
                )

        except Exception:
            raise ValueError(f"rule mismatch: '{self}' and '{rule}'")

    def matches(self, path: str) -> bool:
        """Check if a file matches a rule"""

        # Check if match is ignored
        if self.ignore_suffixes is not None:
            for suffix in self.ignore_suffixes:
                if path.endswith(suffix):
                    return False

        # Check that path belongs to directory
        if self.dirs is not None:
            for dir in self.dirs:
                if path.startswith(dir + "/"):
                    break
            else:
                return False

        # Check matching provided suffixes
        if self.suffixes is not None:
            for ext in self.suffixes:
                if path.endswith(ext):
                    return True

            else:
                return False

        return True


RULES: List[Rule] = [
    # Libraries for external use are MIT
    Rule(
        suffixes=[
            ".proto",
            ".go",
        ],
        ignore_suffixes=[
            ".connect.go",
        ],
        dirs=[
            "packages/trustix-proto",
            "packages/go-lib",
        ],
        license="MIT",
        add_header=True,
    ),
    Rule(
        # Same as external libraries byt connect-go files do not include license
        # headers and it becomes an annoying race between this tool adding them
        # and protoc-gen-connect-go overwriting the files.
        suffixes=[
            ".connect.go",
        ],
        dirs=[
            "packages/trustix-proto",
            "packages/go-lib",
        ],
        license="MIT",
        add_header=False,
    ),
    # Main projects are GPL-3.0-only
    Rule(
        suffixes=[
            ".go",
        ],
        ignore_suffixes=[
            ".connect.go",
            ".pb.go",
        ],
        dirs=[
            "packages/trustix",
            "packages/trustix-nix",
            "packages/trustix-nix-reprod",
        ],
        license="GPL-3.0-only",
        add_header=True,
    ),
    Rule(  # Same as the main projects but ignore sql and generated files
        suffixes=[
            ".sql",
            ".connect.go",
            ".pb.go",
        ],
        dirs=[
            "packages/trustix",
            "packages/trustix-nix",
            "packages/trustix-nix-reprod",
        ],
        license="GPL-3.0-only",
        add_header=False,
    ),
    # This is a fork of github.com/peterbourgon/unixtransport that is Apache-2.0 licensed
    # Assume the whole directory is Apache-2.0, minus some conflicting rules.
    Rule(
        dirs=["packages/unixtransport"],
        license="Apache-2.0",
        ignore_suffixes=[
            ".envrc",
            ".gitignore",
            ".md",
            "go.mod",
            "shell.nix",
            "go.sum",
        ],
    ),
    # Documentation is CC-BY-SA-4.0
    Rule(
        suffixes=[
            ".md",
        ],
        license="CC-BY-SA-4.0",
    ),
    Rule(
        suffixes=[
            ".toml",
            ".csl",
            ".bib",
            ".puml",
        ],
        dirs=["packages/trustix-doc"],
        license="CC-BY-SA-4.0",
    ),
    # These file types are MIT licensed for a few different reasons:
    # - easy nixpkgs integration
    # - general source of inspiration without much licensing requirements
    Rule(
        suffixes=[
            "go.mod",
            ".envrc",
            ".nix",
            "Makefile",
            "Procfile",
        ],
        license="MIT",
    ),
    # All package manager produced lock-files are CC0-1.0 licensed (~public domain)
    Rule(
        suffixes=[
            "flake.lock",
            "go.sum",
            "gomod2nix.toml",
        ],
        license="CC0-1.0",
    ),
    # Configuration files & test fixtures are CC0-1.0 (~public domain)
    Rule(
        suffixes=[
            "sqlc.yaml",
            ".pem",
            "config.toml",
            "treefmt.toml",
        ],
        license="CC0-1.0",
    ),
    Rule(
        dirs=["packages/trustix/dev"],
        license="CC0-1.0",
    ),
    Rule(
        dirs=["packages/trustix/internal/config/fixtures"],
        license="CC0-1.0",
    ),
    Rule(
        dirs=["packages/trustix/internal/signer/fixtures"],
        license="CC0-1.0",
    ),
    Rule(
        dirs=["packages/trustix/tests/compare-fixtures"],
        license="CC0-1.0",
    ),
    Rule(
        dirs=["packages/trustix/tests/fixtures"],
        license="CC0-1.0",
    ),
    Rule(
        suffixes=[
            ".toml",
        ],
        dirs=["packages/trustix/tests"],
        license="CC0-1.0",
    ),
    # Github actions are CC licensed so they can be easily copied without retaining licensing
    Rule(
        dirs=[".github"],
        license="CC0-1.0",
    ),
    # These file types are not copyrighted
    Rule(
        suffixes=[
            ".gitignore",
            "dep5",  # reuse
        ],
        license="CC0-1.0",
    ),
    # CI check scripts and internal development tools are MIT licensed
    Rule(
        dirs=[
            "checks",
            "tools",
        ],
        license="MIT",
        add_header=True,
    ),
    # Sponsor badges are assumed to be copyrighted by their respective organisations
    Rule(
        suffixes=[
            "NGI0_tag.png",
            "nlnet-banner.png",
        ],
        copyright="Copyright © 2021 The NLNet Foundation",
        dirs=["assets"],
        license="LicenseRef-all-rights-reserved",
    ),
    Rule(
        suffixes=[
            "tweag.png",
        ],
        copyright="Copyright © 2021 The Tweag IO",
        dirs=["assets"],
        license="LicenseRef-all-rights-reserved",
    ),
]


if __name__ == "__main__":
    # Maintain a set of files that we have already matched so that
    # multiple conflicting rules won't match the same file
    matched: Dict[str, Rule] = {}

    # List all checked in files
    git_files: List[str] = [
        f
        for f in subprocess.run(["git", "ls-files"], check=True, stdout=subprocess.PIPE)
        .stdout.decode()
        .split("\n")
        if f
    ]

    # Filter out ignored files
    git_files = [
        f for f in git_files if not any(f.startswith(p) for p in IGNORE_PREFIXES)
    ]

    # Find matching rules for all files
    for f in git_files:
        rule: Optional[Rule] = None

        # Exhaustively match rules for every file to find conflicting rules
        for r in RULES:
            if not r.matches(f):
                continue

            if f in matched:
                matched[f].check_compatible(f, r)

            matched[f] = r
            rule = r

        # `reuse lint` fails on files with no explicit license
        if not rule:
            raise ValueError(f"{f} did not match any license rule")

    # Generate the dep5 file
    if True:  # Just to get a distinct block for the pass
        # Create an inverted map, mapping rule -> files so the generated file doesn't need to become too massive
        rule_matches: Dict[Rule, List[str]] = {}

        for f, rule in matched.items():
            # Files with license headers don't need to go in the dep5 file
            if rule.add_header:
                continue
            rule_matches.setdefault(rule, []).append(f)

        with open(".reuse/dep5", "w") as dep5:
            dep5.write(DEP5_HEADER)

            for r, files in rule_matches.items():
                dep5.write(
                    dedent(
                        f"""
                    Files: {" ".join(files)}
                    Copyright: {r.copyright}
                    License: {r.license}
                    """
                    )
                )

    # Add license headers
    with ThreadPoolExecutor() as e:
        for f, rule in matched.items():
            if rule.add_header:
                e.submit(
                    subprocess.run,
                    [
                        "reuse",
                        "addheader",
                        f,
                        "--license",
                        rule.license,
                        "--copyright",
                        rule.copyright,
                    ]
                    + get_style_args(f),
                    check=True,
                )  # type: ignore
