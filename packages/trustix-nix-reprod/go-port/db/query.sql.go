// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: query.sql

package db

import (
	"context"
)

const createDerivation = `-- name: CreateDerivation :one
INSERT INTO derivation (drv, system) VALUES (?, ?) RETURNING id, drv, system
`

type CreateDerivationParams struct {
	Drv    string
	System string
}

func (q *Queries) CreateDerivation(ctx context.Context, arg CreateDerivationParams) (Derivation, error) {
	row := q.db.QueryRowContext(ctx, createDerivation, arg.Drv, arg.System)
	var i Derivation
	err := row.Scan(&i.ID, &i.Drv, &i.System)
	return i, err
}

const createDerivationOutput = `-- name: CreateDerivationOutput :exec
INSERT INTO derivationoutput (output, store_path, derivation_id) VALUES (?, ?, ?)
`

type CreateDerivationOutputParams struct {
	Output       string
	StorePath    string
	DerivationID int64
}

func (q *Queries) CreateDerivationOutput(ctx context.Context, arg CreateDerivationOutputParams) error {
	_, err := q.db.ExecContext(ctx, createDerivationOutput, arg.Output, arg.StorePath, arg.DerivationID)
	return err
}

const createDerivationRefDirect = `-- name: CreateDerivationRefDirect :exec
INSERT INTO derivationrefdirect (drv_id, referrer_id) VALUES (?, ?)
`

type CreateDerivationRefDirectParams struct {
	DrvID      int64
	ReferrerID int64
}

func (q *Queries) CreateDerivationRefDirect(ctx context.Context, arg CreateDerivationRefDirectParams) error {
	_, err := q.db.ExecContext(ctx, createDerivationRefDirect, arg.DrvID, arg.ReferrerID)
	return err
}

const createDerivationRefRecursive = `-- name: CreateDerivationRefRecursive :exec
INSERT INTO derivationrefdirect (drv_id, referrer_id) VALUES (?, ?)
`

type CreateDerivationRefRecursiveParams struct {
	DrvID      int64
	ReferrerID int64
}

func (q *Queries) CreateDerivationRefRecursive(ctx context.Context, arg CreateDerivationRefRecursiveParams) error {
	_, err := q.db.ExecContext(ctx, createDerivationRefRecursive, arg.DrvID, arg.ReferrerID)
	return err
}

const createEval = `-- name: CreateEval :one
INSERT INTO evaluation (commit_sha) VALUES (?) RETURNING id, commit_sha, timestamp
`

func (q *Queries) CreateEval(ctx context.Context, commitSha string) (Evaluation, error) {
	row := q.db.QueryRowContext(ctx, createEval, commitSha)
	var i Evaluation
	err := row.Scan(&i.ID, &i.CommitSha, &i.Timestamp)
	return i, err
}

const getDerivation = `-- name: GetDerivation :one
SELECT id, drv, system FROM derivation
WHERE drv = ? LIMIT 1
`

func (q *Queries) GetDerivation(ctx context.Context, drv string) (Derivation, error) {
	row := q.db.QueryRowContext(ctx, getDerivation, drv)
	var i Derivation
	err := row.Scan(&i.ID, &i.Drv, &i.System)
	return i, err
}

const getDerivationOutput = `-- name: GetDerivationOutput :one
SELECT id, output, store_path, derivation_id FROM derivationoutput
WHERE derivation_id = ? AND store_path = ? LIMIT 1
`

type GetDerivationOutputParams struct {
	DerivationID int64
	StorePath    string
}

func (q *Queries) GetDerivationOutput(ctx context.Context, arg GetDerivationOutputParams) (Derivationoutput, error) {
	row := q.db.QueryRowContext(ctx, getDerivationOutput, arg.DerivationID, arg.StorePath)
	var i Derivationoutput
	err := row.Scan(
		&i.ID,
		&i.Output,
		&i.StorePath,
		&i.DerivationID,
	)
	return i, err
}

const getEval = `-- name: GetEval :one
SELECT id, commit_sha, timestamp FROM evaluation
WHERE commit_sha = ? LIMIT 1
`

func (q *Queries) GetEval(ctx context.Context, commitSha string) (Evaluation, error) {
	row := q.db.QueryRowContext(ctx, getEval, commitSha)
	var i Evaluation
	err := row.Scan(&i.ID, &i.CommitSha, &i.Timestamp)
	return i, err
}
