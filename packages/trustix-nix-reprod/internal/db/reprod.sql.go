// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reprod.sql

package db

import (
	"context"
	"time"
)

const getDerivationReproducibilityByAttr = `-- name: GetDerivationReproducibilityByAttr :many
;

SELECT
    drv.drv
    , drvoutput.output
    , drvoutput.store_path
    , json_group_object(drvoutputresult.output_hash, drvoutputresult.log_id) AS output_results
    FROM derivationoutput AS drvoutput
    JOIN derivation drv ON drv.id = drvoutput.derivation_id
    LEFT JOIN derivationoutputresult drvoutputresult ON drvoutputresult.store_path = drvoutput.store_path
    JOIN derivationrefrecursive refs_recurse ON refs_recurse.drv_id = drvoutput.derivation_id
    JOIN derivation referrer_drv ON referrer_drv.id = refs_recurse.referrer_id
    WHERE referrer_drv.drv = ?
    GROUP BY drvoutput.id
`

type GetDerivationReproducibilityByAttrRow struct {
	Drv           string
	Output        string
	StorePath     string
	OutputResults interface{}
}

func (q *Queries) GetDerivationReproducibilityByAttr(ctx context.Context, drv string) ([]GetDerivationReproducibilityByAttrRow, error) {
	rows, err := q.db.QueryContext(ctx, getDerivationReproducibilityByAttr, drv)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDerivationReproducibilityByAttrRow
	for rows.Next() {
		var i GetDerivationReproducibilityByAttrRow
		if err := rows.Scan(
			&i.Drv,
			&i.Output,
			&i.StorePath,
			&i.OutputResults,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDerivationReproducibilityRecursive = `-- name: GetDerivationReproducibilityRecursive :many
SELECT
    drv.drv
    , drvoutput.output
    , drvoutput.store_path
    , json_group_object(drvoutputresult.output_hash, drvoutputresult.log_id) AS output_results
    FROM derivationoutput AS drvoutput
    JOIN derivation drv ON drv.id = drvoutput.derivation_id
    LEFT JOIN derivationoutputresult drvoutputresult ON drvoutputresult.store_path = drvoutput.store_path
    JOIN derivationrefrecursive refs_recurse ON refs_recurse.drv_id = drvoutput.derivation_id
    JOIN derivation referrer_drv ON referrer_drv.id = refs_recurse.referrer_id
    WHERE referrer_drv.drv = ?
    GROUP BY drvoutput.id
`

type GetDerivationReproducibilityRecursiveRow struct {
	Drv           string
	Output        string
	StorePath     string
	OutputResults interface{}
}

func (q *Queries) GetDerivationReproducibilityRecursive(ctx context.Context, drv string) ([]GetDerivationReproducibilityRecursiveRow, error) {
	rows, err := q.db.QueryContext(ctx, getDerivationReproducibilityRecursive, drv)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDerivationReproducibilityRecursiveRow
	for rows.Next() {
		var i GetDerivationReproducibilityRecursiveRow
		if err := rows.Scan(
			&i.Drv,
			&i.Output,
			&i.StorePath,
			&i.OutputResults,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDerivationReproducibilityTimeSeriesByAttr = `-- name: GetDerivationReproducibilityTimeSeriesByAttr :many
;

SELECT
    eval.id
    , eval.timestamp
    , drv.drv
    , drvoutput.output
    , drvoutput.store_path
    , json_group_object(drvoutputresult.output_hash, drvoutputresult.log_id) AS output_results
    FROM derivationoutput AS drvoutput
    JOIN evaluation eval ON eval.id = drveval.eval
    JOIN derivationeval drveval ON drveval.drv = drvoutput.derivation_id
    JOIN derivation drv ON drv.id = drvoutput.derivation_id
    LEFT JOIN derivationoutputresult drvoutputresult ON drvoutputresult.store_path = drvoutput.store_path
    JOIN derivationrefrecursive refs_recurse ON refs_recurse.drv_id = drvoutput.derivation_id
    JOIN derivationattr drvattr ON drvattr.derivation_id = refs_recurse.referrer_id
    WHERE drvattr.attr = ? AND eval.timestamp >= ? AND eval.timestamp <= ?
    GROUP BY drvoutput.id
`

type GetDerivationReproducibilityTimeSeriesByAttrParams struct {
	Attr        string
	Timestamp   time.Time
	Timestamp_2 time.Time
}

type GetDerivationReproducibilityTimeSeriesByAttrRow struct {
	ID            int64
	Timestamp     time.Time
	Drv           string
	Output        string
	StorePath     string
	OutputResults interface{}
}

func (q *Queries) GetDerivationReproducibilityTimeSeriesByAttr(ctx context.Context, arg GetDerivationReproducibilityTimeSeriesByAttrParams) ([]GetDerivationReproducibilityTimeSeriesByAttrRow, error) {
	rows, err := q.db.QueryContext(ctx, getDerivationReproducibilityTimeSeriesByAttr, arg.Attr, arg.Timestamp, arg.Timestamp_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDerivationReproducibilityTimeSeriesByAttrRow
	for rows.Next() {
		var i GetDerivationReproducibilityTimeSeriesByAttrRow
		if err := rows.Scan(
			&i.ID,
			&i.Timestamp,
			&i.Drv,
			&i.Output,
			&i.StorePath,
			&i.OutputResults,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
