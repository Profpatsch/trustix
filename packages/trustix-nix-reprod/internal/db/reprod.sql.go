// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: reprod.sql

package db

import (
	"context"
)

const getDerivationOutputResultsRecursive = `-- name: GetDerivationOutputResultsRecursive :many
SELECT derivationoutputresult.id, derivationoutputresult.output_hash, derivationoutputresult.store_path, derivationoutputresult.log_id
    FROM derivationoutputresult
    JOIN derivationoutput drvoutput ON drvoutput.store_path = derivationoutputresult.store_path
    JOIN derivation drv ON drv.id = drvoutput.derivation_id
    JOIN derivationrefrecursive refs_recurse ON refs_recurse.drv_id = drv.id
    JOIN derivation referrer_drv ON referrer_drv.id = refs_recurse.referrer_id
    WHERE referrer_drv.drv = ?
`

func (q *Queries) GetDerivationOutputResultsRecursive(ctx context.Context, drv string) ([]Derivationoutputresult, error) {
	rows, err := q.db.QueryContext(ctx, getDerivationOutputResultsRecursive, drv)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Derivationoutputresult
	for rows.Next() {
		var i Derivationoutputresult
		if err := rows.Scan(
			&i.ID,
			&i.OutputHash,
			&i.StorePath,
			&i.LogID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
