// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: eval.sql

package db

import (
	"context"
	"time"
)

const createEval = `-- name: CreateEval :one
INSERT INTO
  evaluation (channel, timestamp)
VALUES
  (?, ?) RETURNING id, channel, timestamp
`

type CreateEvalParams struct {
	Channel   string
	Timestamp time.Time
}

func (q *Queries) CreateEval(ctx context.Context, arg CreateEvalParams) (Evaluation, error) {
	row := q.db.QueryRowContext(ctx, createEval, arg.Channel, arg.Timestamp)
	var i Evaluation
	err := row.Scan(&i.ID, &i.Channel, &i.Timestamp)
	return i, err
}

const createHydraEval = `-- name: CreateHydraEval :one
INSERT INTO
  hydraevaluation (evaluation, hydra_eval_id, revision)
VALUES
  (?, ?, ?) RETURNING id, evaluation, hydra_eval_id, revision
`

type CreateHydraEvalParams struct {
	Evaluation  int64
	HydraEvalID int64
	Revision    string
}

func (q *Queries) CreateHydraEval(ctx context.Context, arg CreateHydraEvalParams) (Hydraevaluation, error) {
	row := q.db.QueryRowContext(ctx, createHydraEval, arg.Evaluation, arg.HydraEvalID, arg.Revision)
	var i Hydraevaluation
	err := row.Scan(
		&i.ID,
		&i.Evaluation,
		&i.HydraEvalID,
		&i.Revision,
	)
	return i, err
}

const getEvalByHydraID = `-- name: GetEvalByHydraID :one
SELECT
  eval.id, eval.channel, eval.timestamp
FROM
  hydraevaluation AS hydraeval
  JOIN evaluation eval ON eval.id = hydraeval.evaluation
WHERE
  eval.channel = ?
  AND hydraeval.hydra_eval_id = ?
LIMIT
  1
`

type GetEvalByHydraIDParams struct {
	Channel     string
	HydraEvalID int64
}

func (q *Queries) GetEvalByHydraID(ctx context.Context, arg GetEvalByHydraIDParams) (Evaluation, error) {
	row := q.db.QueryRowContext(ctx, getEvalByHydraID, arg.Channel, arg.HydraEvalID)
	var i Evaluation
	err := row.Scan(&i.ID, &i.Channel, &i.Timestamp)
	return i, err
}

const getLatestHydraEval = `-- name: GetLatestHydraEval :one
SELECT
  hydraeval.id, hydraeval.evaluation, hydraeval.hydra_eval_id, hydraeval.revision
FROM
  hydraevaluation AS hydraeval
  JOIN evaluation eval ON eval.id = hydraeval.evaluation
WHERE
  eval.channel = ?
ORDER BY
  hydraeval.hydra_eval_id DESC
LIMIT
  1
`

func (q *Queries) GetLatestHydraEval(ctx context.Context, channel string) (Hydraevaluation, error) {
	row := q.db.QueryRowContext(ctx, getLatestHydraEval, channel)
	var i Hydraevaluation
	err := row.Scan(
		&i.ID,
		&i.Evaluation,
		&i.HydraEvalID,
		&i.Revision,
	)
	return i, err
}
