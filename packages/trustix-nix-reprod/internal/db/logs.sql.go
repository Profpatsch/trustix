// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: logs.sql

package db

import (
	"context"
)

const createLog = `-- name: CreateLog :one
INSERT OR IGNORE INTO log (log_id, tree_size) VALUES (?, 0) RETURNING id, log_id, tree_size
`

func (q *Queries) CreateLog(ctx context.Context, logID string) (Log, error) {
	row := q.db.QueryRowContext(ctx, createLog, logID)
	var i Log
	err := row.Scan(&i.ID, &i.LogID, &i.TreeSize)
	return i, err
}

const getLog = `-- name: GetLog :one
SELECT id, log_id, tree_size FROM log
WHERE log_id = ? LIMIT 1
`

func (q *Queries) GetLog(ctx context.Context, logID string) (Log, error) {
	row := q.db.QueryRowContext(ctx, getLog, logID)
	var i Log
	err := row.Scan(&i.ID, &i.LogID, &i.TreeSize)
	return i, err
}
