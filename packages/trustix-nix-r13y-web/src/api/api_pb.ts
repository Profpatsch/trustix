// Copyright Â© 2020-2022 The Trustix Authors
//
// SPDX-License-Identifier: GPL-3.0-only

// @generated by protoc-gen-es v0.1.1 with parameter "target=ts"
// @generated from file api.proto (package reprod_api.v1, syntax proto3)
/* eslint-disable */
/* @ts-nocheck */

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3, protoInt64} from "@bufbuild/protobuf";

/**
 * @generated from message reprod_api.v1.DerivationReproducibilityRequest
 */
export class DerivationReproducibilityRequest extends Message<DerivationReproducibilityRequest> {
  /**
   * @generated from field: string DrvPath = 1;
   */
  DrvPath = "";

  constructor(data?: PartialMessage<DerivationReproducibilityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.DerivationReproducibilityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "DrvPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DerivationReproducibilityRequest {
    return new DerivationReproducibilityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DerivationReproducibilityRequest {
    return new DerivationReproducibilityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DerivationReproducibilityRequest {
    return new DerivationReproducibilityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DerivationReproducibilityRequest | PlainMessage<DerivationReproducibilityRequest> | undefined, b: DerivationReproducibilityRequest | PlainMessage<DerivationReproducibilityRequest> | undefined): boolean {
    return proto3.util.equals(DerivationReproducibilityRequest, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.DerivationReproducibilityResponse
 */
export class DerivationReproducibilityResponse extends Message<DerivationReproducibilityResponse> {
  /**
   * @generated from field: string DrvPath = 1;
   */
  DrvPath = "";

  /**
   * @generated from field: map<string, reprod_api.v1.DerivationReproducibilityResponse.Derivation> UnreproducedPaths = 2;
   */
  UnreproducedPaths: { [key: string]: DerivationReproducibilityResponse_Derivation } = {};

  /**
   * @generated from field: map<string, reprod_api.v1.DerivationReproducibilityResponse.Derivation> ReproducedPaths = 3;
   */
  ReproducedPaths: { [key: string]: DerivationReproducibilityResponse_Derivation } = {};

  /**
   * @generated from field: map<string, reprod_api.v1.DerivationReproducibilityResponse.Derivation> UnknownPaths = 4;
   */
  UnknownPaths: { [key: string]: DerivationReproducibilityResponse_Derivation } = {};

  /**
   * @generated from field: map<string, reprod_api.v1.DerivationReproducibilityResponse.Derivation> MissingPaths = 5;
   */
  MissingPaths: { [key: string]: DerivationReproducibilityResponse_Derivation } = {};

  constructor(data?: PartialMessage<DerivationReproducibilityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.DerivationReproducibilityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "DrvPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "UnreproducedPaths", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DerivationReproducibilityResponse_Derivation} },
    { no: 3, name: "ReproducedPaths", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DerivationReproducibilityResponse_Derivation} },
    { no: 4, name: "UnknownPaths", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DerivationReproducibilityResponse_Derivation} },
    { no: 5, name: "MissingPaths", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DerivationReproducibilityResponse_Derivation} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DerivationReproducibilityResponse {
    return new DerivationReproducibilityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DerivationReproducibilityResponse {
    return new DerivationReproducibilityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DerivationReproducibilityResponse {
    return new DerivationReproducibilityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DerivationReproducibilityResponse | PlainMessage<DerivationReproducibilityResponse> | undefined, b: DerivationReproducibilityResponse | PlainMessage<DerivationReproducibilityResponse> | undefined): boolean {
    return proto3.util.equals(DerivationReproducibilityResponse, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.DerivationReproducibilityResponse.DerivationOutputHash
 */
export class DerivationReproducibilityResponse_DerivationOutputHash extends Message<DerivationReproducibilityResponse_DerivationOutputHash> {
  /**
   * @generated from field: repeated int64 LogIDs = 1;
   */
  LogIDs: bigint[] = [];

  constructor(data?: PartialMessage<DerivationReproducibilityResponse_DerivationOutputHash>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.DerivationReproducibilityResponse.DerivationOutputHash";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "LogIDs", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DerivationReproducibilityResponse_DerivationOutputHash {
    return new DerivationReproducibilityResponse_DerivationOutputHash().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DerivationReproducibilityResponse_DerivationOutputHash {
    return new DerivationReproducibilityResponse_DerivationOutputHash().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DerivationReproducibilityResponse_DerivationOutputHash {
    return new DerivationReproducibilityResponse_DerivationOutputHash().fromJsonString(jsonString, options);
  }

  static equals(a: DerivationReproducibilityResponse_DerivationOutputHash | PlainMessage<DerivationReproducibilityResponse_DerivationOutputHash> | undefined, b: DerivationReproducibilityResponse_DerivationOutputHash | PlainMessage<DerivationReproducibilityResponse_DerivationOutputHash> | undefined): boolean {
    return proto3.util.equals(DerivationReproducibilityResponse_DerivationOutputHash, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.DerivationReproducibilityResponse.DerivationOutput
 */
export class DerivationReproducibilityResponse_DerivationOutput extends Message<DerivationReproducibilityResponse_DerivationOutput> {
  /**
   * @generated from field: string Output = 1;
   */
  Output = "";

  /**
   * @generated from field: string StorePath = 2;
   */
  StorePath = "";

  /**
   * Map output hash to log id
   *
   * @generated from field: map<string, reprod_api.v1.DerivationReproducibilityResponse.DerivationOutputHash> OutputHashes = 3;
   */
  OutputHashes: { [key: string]: DerivationReproducibilityResponse_DerivationOutputHash } = {};

  constructor(data?: PartialMessage<DerivationReproducibilityResponse_DerivationOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.DerivationReproducibilityResponse.DerivationOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "StorePath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "OutputHashes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DerivationReproducibilityResponse_DerivationOutputHash} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DerivationReproducibilityResponse_DerivationOutput {
    return new DerivationReproducibilityResponse_DerivationOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DerivationReproducibilityResponse_DerivationOutput {
    return new DerivationReproducibilityResponse_DerivationOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DerivationReproducibilityResponse_DerivationOutput {
    return new DerivationReproducibilityResponse_DerivationOutput().fromJsonString(jsonString, options);
  }

  static equals(a: DerivationReproducibilityResponse_DerivationOutput | PlainMessage<DerivationReproducibilityResponse_DerivationOutput> | undefined, b: DerivationReproducibilityResponse_DerivationOutput | PlainMessage<DerivationReproducibilityResponse_DerivationOutput> | undefined): boolean {
    return proto3.util.equals(DerivationReproducibilityResponse_DerivationOutput, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.DerivationReproducibilityResponse.Derivation
 */
export class DerivationReproducibilityResponse_Derivation extends Message<DerivationReproducibilityResponse_Derivation> {
  /**
   * @generated from field: map<string, reprod_api.v1.DerivationReproducibilityResponse.DerivationOutput> Outputs = 2;
   */
  Outputs: { [key: string]: DerivationReproducibilityResponse_DerivationOutput } = {};

  constructor(data?: PartialMessage<DerivationReproducibilityResponse_Derivation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.DerivationReproducibilityResponse.Derivation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "Outputs", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: DerivationReproducibilityResponse_DerivationOutput} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DerivationReproducibilityResponse_Derivation {
    return new DerivationReproducibilityResponse_Derivation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DerivationReproducibilityResponse_Derivation {
    return new DerivationReproducibilityResponse_Derivation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DerivationReproducibilityResponse_Derivation {
    return new DerivationReproducibilityResponse_Derivation().fromJsonString(jsonString, options);
  }

  static equals(a: DerivationReproducibilityResponse_Derivation | PlainMessage<DerivationReproducibilityResponse_Derivation> | undefined, b: DerivationReproducibilityResponse_Derivation | PlainMessage<DerivationReproducibilityResponse_Derivation> | undefined): boolean {
    return proto3.util.equals(DerivationReproducibilityResponse_Derivation, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.AttrReproducibilityTimeSeriesPoint
 */
export class AttrReproducibilityTimeSeriesPoint extends Message<AttrReproducibilityTimeSeriesPoint> {
  /**
   * @generated from field: int64 EvalID = 1;
   */
  EvalID = protoInt64.zero;

  /**
   * @generated from field: int64 EvalTimestamp = 2;
   */
  EvalTimestamp = protoInt64.zero;

  /**
   * @generated from field: string DrvPath = 3;
   */
  DrvPath = "";

  /**
   * @generated from field: float PctReproduced = 4;
   */
  PctReproduced = 0;

  constructor(data?: PartialMessage<AttrReproducibilityTimeSeriesPoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.AttrReproducibilityTimeSeriesPoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "EvalID", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "EvalTimestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "DrvPath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "PctReproduced", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttrReproducibilityTimeSeriesPoint {
    return new AttrReproducibilityTimeSeriesPoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttrReproducibilityTimeSeriesPoint {
    return new AttrReproducibilityTimeSeriesPoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttrReproducibilityTimeSeriesPoint {
    return new AttrReproducibilityTimeSeriesPoint().fromJsonString(jsonString, options);
  }

  static equals(a: AttrReproducibilityTimeSeriesPoint | PlainMessage<AttrReproducibilityTimeSeriesPoint> | undefined, b: AttrReproducibilityTimeSeriesPoint | PlainMessage<AttrReproducibilityTimeSeriesPoint> | undefined): boolean {
    return proto3.util.equals(AttrReproducibilityTimeSeriesPoint, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.AttrReproducibilityTimeSeriesResponse
 */
export class AttrReproducibilityTimeSeriesResponse extends Message<AttrReproducibilityTimeSeriesResponse> {
  /**
   * @generated from field: repeated reprod_api.v1.AttrReproducibilityTimeSeriesPoint Points = 1;
   */
  Points: AttrReproducibilityTimeSeriesPoint[] = [];

  /**
   * @generated from field: float PctReproduced = 2;
   */
  PctReproduced = 0;

  constructor(data?: PartialMessage<AttrReproducibilityTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.AttrReproducibilityTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Points", kind: "message", T: AttrReproducibilityTimeSeriesPoint, repeated: true },
    { no: 2, name: "PctReproduced", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttrReproducibilityTimeSeriesResponse {
    return new AttrReproducibilityTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttrReproducibilityTimeSeriesResponse {
    return new AttrReproducibilityTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttrReproducibilityTimeSeriesResponse {
    return new AttrReproducibilityTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AttrReproducibilityTimeSeriesResponse | PlainMessage<AttrReproducibilityTimeSeriesResponse> | undefined, b: AttrReproducibilityTimeSeriesResponse | PlainMessage<AttrReproducibilityTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(AttrReproducibilityTimeSeriesResponse, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.AttrReproducibilityTimeSeriesRequest
 */
export class AttrReproducibilityTimeSeriesRequest extends Message<AttrReproducibilityTimeSeriesRequest> {
  /**
   * @generated from field: string Attr = 1;
   */
  Attr = "";

  /**
   * @generated from field: int64 Start = 2;
   */
  Start = protoInt64.zero;

  /**
   * @generated from field: int64 Stop = 3;
   */
  Stop = protoInt64.zero;

  /**
   * @generated from field: string Channel = 4;
   */
  Channel = "";

  constructor(data?: PartialMessage<AttrReproducibilityTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.AttrReproducibilityTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Attr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "Stop", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "Channel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AttrReproducibilityTimeSeriesRequest {
    return new AttrReproducibilityTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AttrReproducibilityTimeSeriesRequest {
    return new AttrReproducibilityTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AttrReproducibilityTimeSeriesRequest {
    return new AttrReproducibilityTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AttrReproducibilityTimeSeriesRequest | PlainMessage<AttrReproducibilityTimeSeriesRequest> | undefined, b: AttrReproducibilityTimeSeriesRequest | PlainMessage<AttrReproducibilityTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(AttrReproducibilityTimeSeriesRequest, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.SuggestsAttributeRequest
 */
export class SuggestsAttributeRequest extends Message<SuggestsAttributeRequest> {
  /**
   * @generated from field: string AttrPrefix = 1;
   */
  AttrPrefix = "";

  constructor(data?: PartialMessage<SuggestsAttributeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.SuggestsAttributeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "AttrPrefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestsAttributeRequest {
    return new SuggestsAttributeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestsAttributeRequest {
    return new SuggestsAttributeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestsAttributeRequest {
    return new SuggestsAttributeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestsAttributeRequest | PlainMessage<SuggestsAttributeRequest> | undefined, b: SuggestsAttributeRequest | PlainMessage<SuggestsAttributeRequest> | undefined): boolean {
    return proto3.util.equals(SuggestsAttributeRequest, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.SuggestAttributeResponse
 */
export class SuggestAttributeResponse extends Message<SuggestAttributeResponse> {
  /**
   * @generated from field: repeated string Attrs = 1;
   */
  Attrs: string[] = [];

  constructor(data?: PartialMessage<SuggestAttributeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.SuggestAttributeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Attrs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SuggestAttributeResponse {
    return new SuggestAttributeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SuggestAttributeResponse {
    return new SuggestAttributeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SuggestAttributeResponse {
    return new SuggestAttributeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SuggestAttributeResponse | PlainMessage<SuggestAttributeResponse> | undefined, b: SuggestAttributeResponse | PlainMessage<SuggestAttributeResponse> | undefined): boolean {
    return proto3.util.equals(SuggestAttributeResponse, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.DiffRequest
 */
export class DiffRequest extends Message<DiffRequest> {
  /**
   * @generated from field: string OutputHash1 = 1;
   */
  OutputHash1 = "";

  /**
   * @generated from field: string OutputHash2 = 2;
   */
  OutputHash2 = "";

  constructor(data?: PartialMessage<DiffRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.DiffRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "OutputHash1", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "OutputHash2", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffRequest {
    return new DiffRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffRequest {
    return new DiffRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffRequest {
    return new DiffRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DiffRequest | PlainMessage<DiffRequest> | undefined, b: DiffRequest | PlainMessage<DiffRequest> | undefined): boolean {
    return proto3.util.equals(DiffRequest, a, b);
  }
}

/**
 * @generated from message reprod_api.v1.DiffResponse
 */
export class DiffResponse extends Message<DiffResponse> {
  /**
   * @generated from field: string HTMLDiff = 1;
   */
  HTMLDiff = "";

  constructor(data?: PartialMessage<DiffResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "reprod_api.v1.DiffResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "HTMLDiff", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DiffResponse {
    return new DiffResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DiffResponse {
    return new DiffResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DiffResponse {
    return new DiffResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DiffResponse | PlainMessage<DiffResponse> | undefined, b: DiffResponse | PlainMessage<DiffResponse> | undefined): boolean {
    return proto3.util.equals(DiffResponse, a, b);
  }
}

