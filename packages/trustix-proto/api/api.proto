// Copyright Â© 2020-2022 The Trustix Authors
//
// SPDX-License-Identifier: MIT

syntax = "proto2";

import "schema/loghead.proto";
import "schema/logleaf.proto";

package trustix_api.v1;

option go_package = "github.com/nix-community/trustix/packages/trustix-proto/api";

// Request a signed head for a given log
message LogHeadRequest {

  // Log identifier
  required string LogID = 1;
}

// Get a consistency proof between two given log sizes
message GetLogConsistencyProofRequest {

  // Log identifier
  required string LogID = 1;

  // From tree size
  required uint64 FirstSize = 2;

  // To tree size
  required uint64 SecondSize = 3;
}

message ProofResponse { repeated bytes Proof = 1; }

// Get log audit proof for a given tree
message GetLogAuditProofRequest {

  // Log identifier
  required string LogID = 1;

  // Tree node index
  required uint64 Index = 2;

  // Tree size (proof reference)
  required uint64 TreeSize = 3;
}

message GetLogEntriesRequest {

  // Log identifier
  required string LogID = 1;

  // Get entries from
  required uint64 Start = 2;

  // Get entries to
  required uint64 Finish = 3;
}

message GetMapValueRequest {

  // Log identifier
  required string LogID = 1;

  // Map key
  required bytes Key = 2;

  // Map root hash to derive proof from
  required bytes MapRoot = 3;
}

// Sparse merkle tree proof
message SparseCompactMerkleProof {
  repeated bytes SideNodes = 1;
  optional bytes NonMembershipLeafData = 2;
  required bytes BitMask = 3;
  required uint64 NumSideNodes = 4;
}

message MapValueResponse {
  // Note that the Value field is actually a MapEntry
  // but we need to return the marshaled version
  // as that's what the proof is created from
  required bytes Value = 1;
  required SparseCompactMerkleProof Proof = 2;
}

message LogEntriesResponse { repeated trustix_schema.v1.LogLeaf Leaves = 1; }

message KeyValuePair {

  // Map key
  required bytes Key = 1;

  // Map value
  required bytes Value = 2;
}

message ValueRequest { required bytes Digest = 1; }

message ValueResponse { required bytes Value = 1; }

message LogsRequest {
  // Allow to filter logs response based on the protocol identifier
  repeated string Protocols = 1;
}

message LogSigner {
  enum KeyTypes { ed25519 = 0; }
  required KeyTypes KeyType = 1;
  required string Public = 2;
}

message Log {
  required string LogID = 1;

  enum LogModes { Log = 0; }
  required LogModes Mode = 2;

  required string Protocol = 3;

  required LogSigner Signer = 4;
  map<string, string> Meta = 5;
}

message LogsResponse { repeated Log Logs = 1; }

// NodeAPI is a logical grouping for RPC methods that are for the entire node
// rather than individual logs.
service NodeAPI {

  // Get a list of all logs published by this node
  rpc Logs(LogsRequest) returns (LogsResponse) {}

  // Get values by their content-address
  rpc GetValue(ValueRequest) returns (ValueResponse) {}
}

// LogAPI is a logical grouping for RPC methods that are specific to a given
// log.
service LogAPI {

  // Get signed head
  rpc GetHead(LogHeadRequest) returns (trustix_schema.v1.LogHead) {}

  // Log

  rpc GetLogConsistencyProof(GetLogConsistencyProofRequest)
      returns (ProofResponse) {}

  rpc GetLogAuditProof(GetLogAuditProofRequest) returns (ProofResponse) {}

  rpc GetLogEntries(GetLogEntriesRequest) returns (LogEntriesResponse) {}

  // Map

  rpc GetMapValue(GetMapValueRequest) returns (MapValueResponse) {}

  // Maphead log

  rpc GetMHLogConsistencyProof(GetLogConsistencyProofRequest)
      returns (ProofResponse) {}

  rpc GetMHLogAuditProof(GetLogAuditProofRequest) returns (ProofResponse) {}

  rpc GetMHLogEntries(GetLogEntriesRequest) returns (LogEntriesResponse) {}
}
