// Copyright Â© 2020-2022 The Trustix Authors
//
// SPDX-License-Identifier: MIT

syntax = "proto2";

import "schema/mapentry.proto";
import "schema/loghead.proto";
import "api/api.proto";

option go_package = "github.com/nix-community/trustix/packages/trustix-proto/rpc";

package trustix_rpc.v1;

// RPCApi are "private" rpc methods for an instance.
// This should only be available to trusted parties.
service RPCApi {
  // Get a list of all logs published/subscribed by this node
  rpc Logs(trustix_api.v1.LogsRequest) returns (trustix_api.v1.LogsResponse) {}

  // Decide on an output for key based on the configured decision method
  rpc Decide(DecideRequest) returns (DecisionResponse) {}

  // Get values by their content-address
  rpc GetValue(trustix_api.v1.ValueRequest) returns (trustix_api.v1.ValueResponse) {}
}

// RPCApi are "private" rpc methods for an instance related to a specific log.
// This should only be available to trusted parties.
service LogRPC {
  rpc GetHead(trustix_api.v1.LogHeadRequest) returns (trustix_schema.v1.LogHead) {}
  rpc GetLogEntries(trustix_api.v1.GetLogEntriesRequest) returns (trustix_api.v1.LogEntriesResponse) {}
  rpc Submit(SubmitRequest) returns (SubmitResponse) {}
  rpc Flush(FlushRequest) returns (FlushResponse) {}
}

message DecideRequest {
  required bytes Key = 1;
  required string Protocol = 2;
}

message EntriesResponse {
  required bytes Key = 1;
  map<string, trustix_schema.v1.MapEntry> Entries = 2;
}

message LogValueResponse {
  required string LogID = 1;
  required bytes Digest = 2;
}

message LogValueDecision {
  repeated string LogIDs = 1;
  required bytes Digest = 2;
  required int32 Confidence = 3;
  required bytes Value = 4;
}

message DecisionResponse {
  required LogValueDecision Decision = 1;

  // Non-matches (hash mismatch)
  repeated LogValueResponse Mismatches = 2;

  // Full misses (log ids missing log entry entirely)
  repeated string Misses = 3;
}

message SubmitRequest {
  required string LogID = 1;
  repeated trustix_api.v1.KeyValuePair Items = 2;
}

message SubmitResponse {
  enum Status { OK = 0; }
  required Status status = 1;
}

message FlushRequest { required string LogID = 1; }

message FlushResponse {}
